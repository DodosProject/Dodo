// <auto-generated />
using System;
using DoDo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoDo.Data.Migrations
{
    [DbContext(typeof(DoDoContext))]
    [Migration("20240517195132_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoDo.Models.DoTask", b =>
                {
                    b.Property<int>("DoTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoTaskId"), 1L, 1);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("DoTasks");

                    b.HasData(
                        new
                        {
                            DoTaskId = 10001,
                            Completed = false,
                            CreationDate = new DateTime(2024, 5, 15, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tengo que fregar el suelo",
                            Priority = 1,
                            Title = "Fregar",
                            UserId = 1
                        },
                        new
                        {
                            DoTaskId = 10002,
                            Completed = false,
                            CreationDate = new DateTime(2024, 5, 16, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hacer la compra de comida del mes",
                            Priority = 1,
                            Title = "Comprar",
                            UserId = 1
                        },
                        new
                        {
                            DoTaskId = 10003,
                            Completed = true,
                            CreationDate = new DateTime(2024, 4, 15, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ir al banco a ingresar dinero",
                            Priority = 2,
                            Title = "Banco",
                            UserId = 3
                        },
                        new
                        {
                            DoTaskId = 10004,
                            Completed = false,
                            CreationDate = new DateTime(2024, 4, 24, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Leer 3 capítulos de La comunidad del anillo",
                            Priority = 1,
                            Title = "Leer",
                            UserId = 2
                        },
                        new
                        {
                            DoTaskId = 10005,
                            Completed = true,
                            CreationDate = new DateTime(2024, 4, 28, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hacer la colada de la ropa sucia",
                            Priority = 3,
                            Title = "Colada",
                            UserId = 4
                        },
                        new
                        {
                            DoTaskId = 10006,
                            Completed = true,
                            CreationDate = new DateTime(2024, 5, 15, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Crear una App en Vue contenerizada",
                            Priority = 4,
                            Title = "Crear App",
                            UserId = 3
                        },
                        new
                        {
                            DoTaskId = 10007,
                            Completed = true,
                            CreationDate = new DateTime(2024, 4, 11, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Clonar el repositorio que me han mandado",
                            Priority = 2,
                            Title = "Clonar repo",
                            UserId = 3
                        },
                        new
                        {
                            DoTaskId = 10008,
                            Completed = false,
                            CreationDate = new DateTime(2024, 5, 9, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Desplegar la App en AWS",
                            Priority = 1,
                            Title = "Desplegar",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DoDo.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@admin.com",
                            Name = "Admin",
                            Password = "admin",
                            RegistrationDate = new DateTime(2024, 4, 3, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            Email = "ignaciocasaus1cns@gmail.com",
                            Name = "Ignacio",
                            Password = "patata",
                            RegistrationDate = new DateTime(2024, 4, 4, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 3,
                            Email = "emaildealex@gmail.com",
                            Name = "Alex",
                            Password = "pimiento",
                            RegistrationDate = new DateTime(2024, 4, 5, 18, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            Email = "pepe@pepe.com",
                            Name = "Pepe",
                            Password = "pepe",
                            RegistrationDate = new DateTime(2024, 4, 15, 19, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DoDo.Models.DoTask", b =>
                {
                    b.HasOne("DoDo.Models.User", "Owner")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DoDo.Models.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
